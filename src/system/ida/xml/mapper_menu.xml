<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mapper 태그 선언 -->
<mapper namespace="system.ida.dao.MenuDAO">
	<sql id="menuWhere">
			<if test="keyword!=null and keyword.length()>0">
					and (
						upper(m_no) like upper('%${keyword}%')
						<!-- 서브쿼리로 인해 띄우는 것들 먹게 하는 방법 -->
						or upper(ma_code) like upper('%${keyword}%')
						or upper(mb_code) like upper('%${keyword}%')
						or upper(s_name) like upper('%${keyword}%')
						<!-- ============================= -->
						or upper(m_name) like upper('%${keyword}%')
						or upper(price) like upper('%${keyword}%')
						or upper(m_comment) like upper('%${keyword}%')
						or upper(reg_date) like upper('%${keyword}%')	
					)
			</if>
		</sql>
		
		<!-- 가게에 등록된 메뉴를 가져오는 select 태그 -->
		<select id="getMenuList" parameterType="system.ida.dto.MenuSearchDTO" resultType="system.ida.dto.MenuDTO">
				select zzz.*, rownum RNUM from(
					select 	
						m.mi_no "mi_no"
						,(select a.ma_name from code_menu_alpha a where a.ma_code=m.ma_code)   "ma_code"
						,(select b.mb_name from code_menu_beta b where b.mb_code=m.mb_code)   "mb_code"
						,m.mi_name "mi_name"
						,m.price "price"
						,m.mi_comment "mi_comment"
						,to_char(m.reg_date, 'YYYY-MM-DD(dy)') "reg_date"	
					from menu_info m
					where m.is_del='F'
						and s_no = (select
										s_no
									from
										store
									where
										s_id=#{s_id})
					<include refid="menuWhere"/>) zzz
		</select>
		
		<!-- 가게에 등록된 메뉴의 총 개수를 가져오는 select 태그 -->
		<select id="getMenuListAllCnt" parameterType="system.ida.dto.MenuSearchDTO" resultType="int">
			select 
				count(*) 
			from menu_info		
			where is_del='F'
				and s_no = (select
								s_no
							from
								store
							where
								s_id=#{s_id})
			<include refid="menuWhere"/>
		</select>
	
	<!-- 가게 메뉴를 추가하는 insert 태그 -->
	<insert id='insertStoreMenu' parameterType="system.ida.dto.MenuDTO">
		insert into menu_info(
			mi_no,
			ma_code,
			mb_code,
			s_no,
			mi_name,
			price,
			mi_comment
		)values(
			(select nvl(max(mi_no),0)+1 from menu_info)
			,(select ma_code from code_menu_alpha  where ma_name=#{ma_code})
			,(select mb_code from code_menu_beta  where mb_name=#{mb_code})
			,(select s_no from store where s_id=#{s_id})
			,#{mi_name}
			,#{price}
			,#{mi_comment}
		)
	</insert>
	
	<!-- 메뉴대분류의 목록을 검색하는 select 태그 -->
	<select id='getCodeMenuAlpha' resultType="system.ida.dto.CodeMenuAlphaDTO">
		select
			ma_name	"ma_name"
		from
			code_menu_alpha
	</select>
	
	<!-- 메뉴소분류의 목록을 검색하는 select 태그 -->
	<select id='getCodeMenuBeta' resultType="system.ida.dto.CodeMenuBetaDTO">
		select
			mb_name	"mb_name"
		from
			code_menu_beta
	</select>
	
	<!-- 식자재 목록을 검색하는 select 태그 -->
	<select id='getIngredientList' parameterType="string" resultType="system.ida.dto.IngredientDTO">
		select
			i_name	"i_name"
		from
			ingredient
		where s_no=(select s_no from store where s_id=#{s_id})
	</select>
	<!-- 가게 메뉴를 수정하는 update 태그 -->
	<update id="updateStoreMenu" parameterType="hashmap">
			update menu_info 
			set 
				ma_code=(select ma_code from code_menu_alpha a where ma_name=#{ma_code})
				,mb_code=(select mb_code from code_menu_beta b where mb_name=#{mb_code})
				,mi_name=#{mi_name}
				,price=#{price}
				,mi_comment=#{mi_comment}
			where mi_no=#{mi_no}
	</update>
	
	<!-- 가게 메뉴를 삭제하는 update 태그 -->
	<update id="deleteStoreMenu" parameterType="hashmap">
			update menu_info 
			set 
				is_del='T'
			where mi_no=#{mi_no}
	</update>
	
	<!-- 가게 메뉴의 식자재를 추가하는 insert 태그 -->
	<insert id='insertMenuIngredient' parameterType="system.ida.dto.MenuDTO">
		<foreach collection="i_name" item="i_name" open="insert all" close="select * from dual" separator=" ">
		into menu_ingredient(mi_no,i_no)
		values
			(
			(select max(mi_no) from menu_info)
			,(select i_no from ingredient where i_name=#{i_name})
			)
		</foreach>
	</insert>
	
	<!-- 가게 메뉴를 삭제할 경우 식자재도 삭제하는 delete 태그 -->
	<delete id="deleteMenuIngredient" parameterType="hashmap">
		delete from
			menu_ingredient
		where
			mi_no = #{mi_no}
	</delete>
</mapper>